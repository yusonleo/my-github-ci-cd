
name: CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ <yourbranch> ]

jobs:
  build: 
    runs-on: self-hosted
    container:
      image: <your-docker-image>
      options: --privileged
      credentials:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PSWD}}
        
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
     - uses: actions/checkout@v2
     - name: build and save 
       run: |
         cd app
         mkdir artifacts
         cp docker-compose.yml ./artifacts
         cp Dockerfile ./artifacts
         cp -R ./html ./artifacts
         cd artifacts
         ls
         docker image prune -a -f
         docker-compose build 
         docker save -o docker-images.tar $(docker-compose config | awk '{if ($1 == "image:") print $2;}')
     - uses: actions/upload-artifact@master
       with:
          name: my-artifact
          path: app/artifacts

     
  upload:
    runs-on: self-hosted
    needs: [build]
    container:
      image: <your-docker-image>
      options: --privileged
      credentials:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PSWD}}
        
    services: 
     docker: 
        image: docker:18.09-dind
        options: --privileged

        
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/download-artifact@master
        with:
          name: my-artifact
          path: app/artifacts
      - name: Loading docker images
        run: |
          cd  app/artifacts/
          docker --host tcp://docker:2375 load --input docker-images.tar
      - name: Uploading app to IEM
        run: |
          cp -RT app /app/src/workspace
          cd /app/src/workspace
          ie-app-publisher-linux de c -u http://docker:2375
          export IE_SKIP_CERTIFICATE=true
          ie-app-publisher-linux em li -u ${{secrets.IEM_URL}} -e ${{secrets.USER_NAME}} -p ${{secrets.PSWD}}
          version=$(ie-app-publisher-linux em app dt -a ${{secrets.APP_ID}} -p | \
            python3 -c "import sys, json; print(json.load(sys.stdin)['versions'][0]['versionNumber'])")
          echo 'old Version: '$version

          version_inc=$(echo $version | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
          echo 'new Version: '$version_inc

          ie-app-publisher-linux em app cuv -a ${{secrets.APP_ID}} -v $version_inc -y ./docker-compose.prod.yml -n '{"hello-edge":[{"name":"hello-edge","protocol":"HTTP","port":"80","headers":"","rewriteTarget":"/"}]}' -s 'hello-edge' -t 'FromBoxReverseProxy' -u "hello-edge" -r "/"
          ie-app-publisher-linux em app uuv -a ${{secrets.APP_ID}} -v $version_inc
